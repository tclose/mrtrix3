#!/usr/bin/env python

# Script that generates a five-tissue-type (5TT) segmented image: the format appropriate for ACT
#
# In this script, major stages of processing can be performed in one of two ways:
#   - Using FSL tools: BET for brain extraction, FAST for tissue segmentation, FIRST for sub-cortical grey matter segmentation
#   - Using segmentations from FreeSurfer


import argparse, os, sys
import lib.app

from lib.runCommand   import runCommand

lib.app.author = 'Robert E. Smith (robert.smith@florey.edu.au)'
lib.app.initCitations([ 'ACT', 'bet', 'fast', 'first', 'FSL' ])
lib.app.initParser('Generate a 5TT image suitable for ACT')

base_parser = lib.app.Parser(description='Arguments & options common to all algorithms', add_help=False, formatter_class=argparse.RawDescriptionHelpFormatter)
base_parser.add_argument('input',  help='The input image (will depend on the algorithm used)')
base_parser.add_argument('output', help='The output 5TT image')
base_parser.add_argument('-nocrop', action='store_true', default=False, help='Do NOT crop the resulting 5TT image to reduce its size (keep the same dimensions as the input image)')
base_parser.add_argument('-sgm_amyg_hipp', action='store_true', default=False, help='Represent the amygdalae and hippocampi as sub-cortical grey matter in the 5TT image')

subparsers = lib.app.parser.add_subparsers(title='software options', description='Select the software / algorithm to be used to derive the 5TT image', help='Additional help available for individual software options: Use e.g. ' + os.path.basename(sys.argv[0]) + ' fsl -help')

# Import the command-line settings for all algorithms found in the scripts/src/_5ttgen/ directory
from src import _5ttgen
algorithm_list = os.listdir(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), 'src', '_5ttgen'))
for filename in algorithm_list:
  filename = filename.split('.')
  if len(filename) == 2 and filename[1] == 'py' and not filename[0] == '__init__':
    __import__('src._5ttgen', globals(), locals(), [ filename[0] ])
    algorithm = getattr(_5ttgen, filename[0])
    algorithm.initParser(subparsers, base_parser)

lib.app.initialise()

# Find out which algorithm the user has requested
algorithm = getattr(_5ttgen, lib.app.args.algorithm)

lib.app.checkOutputFile(lib.app.args.output)
algorithm.checkOutputFiles()

runCommand('mrconvert ' + lib.app.args.input + ' ' + os.path.join(lib.app.tempDir, 'input.mif') + ' -stride +1,+2,+3')
algorithm.getInputFiles()

lib.app.gotoTempDir()

algorithm.execute()

runCommand('mrconvert result.mif ' + os.path.join(lib.app.workingDir, lib.app.args.output) + lib.app.mrtrixForce)
lib.app.complete()

