#!/usr/bin/env python

# Script for performing DWI pre-processing using FSL 5.0 tools eddy / topup / applytopup

# This script is generally the first operation that will be applied to diffusion image data. The precise details of how this image pre-processing takes place depends heavily on the DWI acquisition; specifically, the presence or absence of reversed phase-encoding data.


import math, os, sys
import lib.app

from lib.binaryInPath   import binaryInPath
from lib.delFile        import delFile
from lib.errorMessage   import errorMessage
from lib.getFSLEddyPath import getFSLEddyPath
from lib.getFSLSuffix   import getFSLSuffix
from lib.getHeaderInfo  import getHeaderInfo
from lib.getPEDir       import getPEDir
from lib.isWindows      import isWindows
from lib.printMessage   import printMessage
from lib.runCommand     import runCommand
from lib.warnMessage    import warnMessage

lib.app.author = 'Robert E. Smith (robert.smith@florey.edu.au)'
lib.app.initCitations([ 'eddy', 'FSL', 'Skare2010', 'topup' ])
lib.app.initParser('Perform diffusion image pre-processing using FSL\'s eddy tool; including inhomogeneity distortion correction using FSL\'s topup tool if possible')
lib.app.parser.add_argument('pe_dir', help='The phase encode direction; can be a signed axis number (e.g. -0, 1, +2) or a code (e.g. AP, LR, IS)')
lib.app.parser.add_argument('input',   help='The input DWI series to be corrected')
lib.app.parser.add_argument('output',  help='The output corrected image series')
lib.app.parser.add_argument('-cuda',   help='Use the CUDA version of eddy', action='store_true', default=False)
rpe_group = lib.app.parser.add_argument_group('Options for passing reversed phase-encode data')
rpe_me_group = rpe_group.add_mutually_exclusive_group(required=True)
rpe_me_group.add_argument('-rpe_none', action='store_true', help='Specify explicitly that no reversed phase-encoding image data is provided; eddy will perform eddy current and motion correction only')
rpe_me_group.add_argument('-rpe_pair', nargs=2, metavar=('forward', 'reverse'), help='Provide a pair of images to use for inhomogeneity field estimation; note that the FIRST of these two images must have the same phase-encode direction as the input DWIs')
rpe_me_group.add_argument('-rpe_all', metavar='input_revpe', help='Provide a second DWI series identical to the input series, that has the opposite phase encoding; these will be combined in the output image')
grad_import = lib.app.parser.add_mutually_exclusive_group()
grad_import.add_argument('-grad', help='Provide a gradient table in MRtrix format')
grad_import.add_argument('-fslgrad', nargs=2, metavar=('bvecs', 'bvals'), help='Provide a gradient table in FSL bvecs/bvals format')
grad_export = lib.app.parser.add_mutually_exclusive_group()
grad_export.add_argument('-export_grad_mrtrix', metavar='grad', help='Export the final gradient table in MRtrix format')
grad_export.add_argument('-export_grad_fsl', nargs=2, metavar=('bvecs', 'bvals'), help='Export the final gradient table in FSL bvecs/bvals format')
lib.app.initialise()


if isWindows():
  errorMessage('Script cannot run on Windows due to FSL dependency')

PE_design = ''
if lib.app.args.rpe_none:
  PE_design = 'None'
elif lib.app.args.rpe_pair:
  PE_design = 'Pair'
elif lib.app.args.rpe_all:
  PE_design = 'All'
else:
  errorMessage('Must explicitly specify reversed phase-encoding type (even if none)')

fsl_path = os.environ.get('FSLDIR', '')
if not fsl_path:
  errorMessage('Environment variable FSLDIR is not set; please run appropriate FSL configuration script')

if not PE_design == 'None':
  topup_config_path = os.path.join(fsl_path, 'etc', 'flirtsch', 'b02b0.cnf')
  if not os.path.isfile(topup_config_path):
    errorMessage('Could not find necessary default config file for FSL\'s topup program\n(expected location: ' + topup_config_path + ')')

  topup_cmd = 'topup'
  if not binaryInPath(topup_cmd):
    topup_cmd = 'fsl5.0-topup'
    if not binaryInPath(topup_cmd):
      errorMessage('Could not find FSL program topup; please verify FSL install')

  applytopup_cmd = 'applytopup'
  if not binaryInPath(applytopup_cmd):
    applytopup_cmd = 'fsl5.0-applytopup'
    if not binaryInPath(applytopup_cmd):
      errorMessage('Could not find FSL program applytopup; please verify FSL install')

eddy_cmd = getFSLEddyPath(lib.app.args.cuda)
fsl_suffix = getFSLSuffix()
PE_dir = getPEDir(lib.app.args.pe_dir)

lib.app.checkOutputFile(lib.app.args.output)


# Convert all input images into MRtrix format and store in temprary directory first;
#   that way getHeaderInfo() can be run multiple times without having to repeatedly parse e.g. DICOM data
grad_option = ''
if lib.app.args.grad:
  grad_option = ' -grad ' + lib.app.args.grad
elif lib.app.args.fslgrad:
  grad_option = ' -fslgrad ' + lib.app.args.fslgrad[0] + ' ' + lib.app.args.fslgrad[1]
runCommand('mrconvert ' + lib.app.args.input + ' ' + os.path.join(lib.app.tempDir, 'series.mif') + grad_option)
if PE_design == 'Pair':
  runCommand('mrconvert ' + lib.app.args.rpe_pair[0] + ' ' + os.path.join(lib.app.tempDir, 'pair1.mif'))
  runCommand('mrconvert ' + lib.app.args.rpe_pair[1] + ' ' + os.path.join(lib.app.tempDir, 'pair2.mif'))
elif PE_design == 'All':
  runCommand('mrconvert ' + lib.app.args.rpe_all + ' ' + os.path.join(lib.app.tempDir, 'series2.mif'))

lib.app.gotoTempDir()


# Get information on the input images, particularly so that their validity can be checked
series_size = getHeaderInfo('series.mif', 'size').split()
grad = getHeaderInfo('series.mif', 'dwgrad').split('\n')
stride = getHeaderInfo('series.mif', 'stride')
transform = getHeaderInfo('series.mif', 'transform')
if PE_design == 'Pair':
  Pair1_size  = getHeaderInfo('pair1.mif',  'size').split()
  Pair2_size  = getHeaderInfo('pair2.mif',  'size').split()
elif PE_design == 'All':
  series2_size = getHeaderInfo('series2.mif', 'size').split()
num_volumes = 1
if len(series_size) == 4:
  num_volumes = int(series_size[3])


# Perform necessary checks on input images
if not grad:
  errorMessage('No diffusion gradient table found')
if not len(grad) == num_volumes:
  errorMessage('Number of volumes in gradient table does not match input image')

if PE_design == 'Pair':

  # Check the number of b=0 images
  Pair1_bzero_count = 1
  if len(Pair1_size) == 4:
    Pair1_bzero_count = int(Pair1_size[3])
  elif len(Pair1_size) != 3:
    errorMessage ('First image of reversed phase-encode pair must be a 3D or 4D image')
  Pair2_bzero_count = 1
  if len(Pair2_size) == 4:
    Pair2_bzero_count = int(Pair2_size[3])
  elif len(Pair2_size) != 3:
    errorMessage ('Second image of reversed phase-encode pair must be a 3D or 4D image')

  # Do other verifications on inputs
  if Pair1_size[:3] != Pair2_size[:3]:
    errorMessage ('Dimensions of reversed phase-encode image pair do not match')
  if Pair1_bzero_count != Pair2_bzero_count:
    warnMessage ('Inequal number of b=0 volumes in pair; registration may be biased')
  if series_size[:3] != Pair1_size[:3]:
    errorMessage ('Spatial dimensions of reversed phase-encode pair does not match DWIs')

elif PE_design == 'All':

  if series2_size != series_size:
    errorMessage ('Dimensions of input images do not match')


# If no axes need to be cropped, use the original 4D volume with the image pair
# Otherwise, need to call mrcrop with the appropriate options, and pass the modified images to topup
series_path = 'series.mif'
if not PE_design == 'None':

  pair1_path = 'pair1.mif'
  pair2_path = 'pair2.mif'
  series2_path = 'series2.mif'

  # For any non-even axis sizes, crop the first voxel along that dimension
  crop_option = ''        
  for axis, axis_size in enumerate(series_size[:3]):
    if int(axis_size)%2:
      crop_option += ' -axis ' + str(axis) + ' 1 ' + str(int(axis_size)-1) 

  if crop_option:
    warnMessage('Input images contain at least one non-even dimension; cropping images for topup / eddy compatibility') 
    runCommand('mrcrop series.mif series_crop.mif' + crop_option)
    delFile('series.mif')
    series_path = 'series_crop.mif'
    if PE_design == 'Pair':
      runCommand('mrcrop pair1.mif pair1_crop.mif' + crop_option)
      delFile('pair1.mif')
      pair1_path = 'pair1_crop.mif'
      runCommand('mrcrop pair2.mif pair2_crop.mif' + crop_option)
      delFile('pair2.mif')
      pair2_path = 'pair2_crop.mif'
    else: # 'All'
      runCommand('mrcrop series2.mif series2_crop.mif' + crop_option)
      delFile('series2.mif')
      series2_path = 'series2_crop.mif'


# Convert the input files as necessary for FSL tools
if PE_design == 'None':
  runCommand('mrconvert ' + series_path + ' dwi_pre_topup.nii -stride +1,+2,+3,+4')
if PE_design == 'Pair':
  runCommand('mrconvert ' + series_path + ' dwi_pre_topup.nii -stride +1,+2,+3,+4')
  runCommand('mrcat ' + pair1_path + ' ' + pair2_path + ' - -axis 3 | mrconvert - topup_in.nii -stride +1,+2,+3,+4')
elif PE_design == 'All':
  runCommand('dwiextract ' + series_path + ' -bzero pair1.mif')
  runCommand('dwiextract ' + series2_path + ' -bzero pair2.mif')
  runCommand('mrcat pair1.mif pair2.mif - -axis 3 | mrconvert - topup_in.nii -stride +1,+2,+3,+4')
  runCommand('mrconvert ' + series_path + ' dwi1_pre_topup.nii -stride +1,+2,+3,+4')
  delFile(series_path)
  runCommand('mrconvert ' + series2_path + ' dwi2_pre_topup.nii -stride +1,+2,+3,+4')
  delFile(series2_path)
  runCommand('mrcat dwi1_pre_topup.nii dwi2_pre_topup.nii dwi_pre_eddy.nii -axis 3')


# Calculate how many b=0 volumes are present in each phase-encode direction
rpe_b0_count = [ 1, 0 ]
if PE_design == 'Pair' or PE_design == 'All':
  rpe_b0_count[1] = 1
  temp = getHeaderInfo(pair1_path, 'size').split()  
  if len(temp) == 4:
    rpe_b0_count[0] = temp[3]
  temp = getHeaderInfo(pair2_path, 'size').split()
  if len(temp) == 4:
    rpe_b0_count[1] = temp[3]


# Construct a topup/eddy configuration file
printMessage('Creating phase-encoding configuration file')
config_file = open('config.txt', 'w')
config_line = [ '0', '0', '0', '0.1' ]
if PE_dir[1]:
  config_line[PE_dir[0]] = '-1'
else:
  config_line[PE_dir[0]] = '1'
for lines in range(0, int(rpe_b0_count[0])):
  config_file.write(' '.join (config_line) + '\n')
if PE_dir[1]:
  config_line[PE_dir[0]] = '1'
else:
  config_line[PE_dir[0]] = '-1'
for lines in range(0, int(rpe_b0_count[1])):
  config_file.write(' '.join (config_line) + '\n')
config_file.close()


# Construct an index file for eddy
indices = [ ]
if PE_design == 'None' or PE_design == 'Pair':
  for volume in range(0, num_volumes):
    indices.append('1')
else: # 'All'
  for volume in range(0, num_volumes):
    indices.append('1')
  for volume in range(0, num_volumes):
    indices.append(str(rpe_b0_count[0]+1))

with open('indices.txt', 'w') as index_file:
  index_file.write(' '.join(indices));


eddy_in_topup = ''

if PE_design == 'None':

  # Generate a processing mask for eddy based on the input series
  runCommand('dwi2mask ' + series_path + ' - | maskfilter - dilate - | mrconvert - mask.nii -datatype float32')
  runCommand('mrconvert ' + series_path + ' - -stride +1,+2,+3,+4 | mrinfo - -export_grad_fsl bvecs bvals')

else:

  # Perform the field estimation
  runCommand(topup_cmd + ' --imain=topup_in.nii --datain=config.txt --out=field --fout=field_map' + fsl_suffix + ' --config=' + topup_config_path)


  # Apply the warp field to the input image series to get an initial corrected volume estimate
  if PE_design == 'Pair':
    runCommand(applytopup_cmd + ' --imain=dwi_pre_topup.nii --datain=config.txt --inindex=1 --topup=field --out=dwi_post_topup' + fsl_suffix + ' --method=jac')
  else: # All
    runCommand(applytopup_cmd + ' --imain=dwi1_pre_topup.nii --datain=config.txt --inindex=1 --topup=field --out=dwi1_post_topup' + fsl_suffix + ' --method=jac --interp=trilinear')
    delFile('dwi1_pre_topup.nii')
    runCommand(applytopup_cmd + ' --imain=dwi2_pre_topup.nii --datain=config.txt --inindex=' + str(rpe_b0_count[0]+1) + ' --topup=field --out=dwi2_post_topup' + fsl_suffix + ' --method=jac --interp=trilinear')
    delFile('dwi2_pre_topup.nii')
    runCommand('mrcat dwi1_post_topup' + fsl_suffix + ' dwi2_post_topup' + fsl_suffix + ' dwi_post_topup.nii -axis 3')
    delFile('dwi1_post_topup.nii')
    delFile('dwi2_post_topup.nii')
    
    
  # Create the diffusion encoding table in bvecs / bvals format;
  #   if 'All', need to manually perform the combination
  # Create the diffusion gradient table in FSL format
  # Make sure the strides are identical to the image actually being passed to eddy before exporting the gradient table
  if PE_design == 'Pair':
    runCommand('mrconvert ' + series_path + ' - -stride +1,+2,+3,+4 | mrinfo - -export_grad_fsl bvecs bvals')
  else:
    # Concatenate the diffusion gradient table twice
    with open('grad.b', 'w') as outfile:
      for line in grad:
        outfile.write (line + '\n')
      for line in grad:
        outfile.write (line + '\n')
    runCommand('mrconvert dwi_post_topup.nii - -grad grad.b | mrinfo - -export_grad_fsl bvecs bvals')


  # Use the initial corrected image series from applytopup to derive a processing mask for eddy
  runCommand('mrconvert dwi_post_topup' + fsl_suffix + ' -fslgrad bvecs bvals - | dwi2mask - - | maskfilter - dilate - | mrconvert - mask.nii -datatype float32')

  eddy_in_topup = ' --topup=field'


# Run eddy
if PE_design == 'None' or PE_design == 'Pair':
  eddy_in = 'dwi_pre_topup.nii'
else: # 'All'
  eddy_in = 'dwi_pre_eddy.nii'
runCommand(eddy_cmd + ' --imain=' + eddy_in + ' --mask=mask.nii --index=indices.txt --acqp=config.txt --bvecs=bvecs --bvals=bvals' + eddy_in_topup + ' --out=dwi_post_eddy')


# Get the axis strides from the input series, so the output image can be modified to match
stride_option = ' -stride ' + stride.replace(' ', ',')


# Check to see whether or not eddy has provided a rotated bvecs file;
#   if it has, import this into the output image
bvecs_path = 'dwi_post_eddy.eddy_rotated_bvecs'
if not os.path.isfile(bvecs_path):
  warnMessage('eddy has not provided rotated bvecs file; using original gradient table')
  bvecs_path = 'bvecs'


if PE_design == 'None' or PE_design == 'Pair':

  # Convert the resulting volume to the output image, and re-insert the diffusion encoding
  runCommand('mrconvert dwi_post_eddy' + fsl_suffix + ' result.mif' + stride_option + ' -fslgrad ' + bvecs_path + ' bvals')
  
else: # 'All'

  # Perform a manual combination of the volumes output by eddy, since LSR is disabled
  
  # Generate appropriate bvecs / bvals files
  # Particularly if eddy has provided rotated bvecs, since we're combining two volumes into one that
  #   potentially have subject rotation between them (and therefore the sensitisation direction is
  #   not precisely equivalent), the best we can do is take the mean of the two vectors.
  bvecs = [ [] for axis in range(3) ]
  with open(bvecs_path, 'r') as f:
    for axis, line in enumerate(f):
      bvecs[axis] = line.split()
  bvecs_combined_transpose = [ [] for volume in range(num_volumes) ]
  for volume in range(0, num_volumes):
    bvec_sum = [ float(bvecs[0][volume]) + float(bvecs[0][volume+num_volumes]),
                 float(bvecs[1][volume]) + float(bvecs[1][volume+num_volumes]),
                 float(bvecs[2][volume]) + float(bvecs[2][volume+num_volumes]) ]
    norm2 = bvec_sum[0]*bvec_sum[0] + bvec_sum[1]*bvec_sum[1] + bvec_sum[2]*bvec_sum[2]
    factor = 1.0 / math.sqrt(norm2)
    new_vec = [ bvec_sum[0]*factor, bvec_sum[1]*factor, bvec_sum[2]*factor ]
    bvecs_combined_transpose[volume] = new_vec
  with open('bvecs_combined', 'w') as f:
    for axis in range(0, 3):
      axis_data = [ ]
      for volume in range(0, num_volumes):
        axis_data.append(str(bvecs_combined_transpose[volume][axis]))
      f.write(' '.join(axis_data) + '\n')

  bvals = [ ]
  with open('bvals', 'r') as f:
    bvals = f.read().split()
  bvals = bvals[0:num_volumes]
  with open('bvals_combined', 'w') as f:
    f.write(' '.join(bvals))
    

  # Derive the weight images
  # To properly get a voxel displacement field, need to scale the field map (which is output in Hz) appropriately
  # Scaling appears to be correct; however FSL is a bit ambiguous when it comes to image transforms & strides
  # Looks like topup flips the x-axis on output (both corrected images and field), and erases image transform
  # Eddy seems to expect this and operates accordingly; but since we're doing things external to FSL and
  #   voxel-by-voxel, need to do the flip explicitly; also import the transform from the first input image
  #   for the sake of visualisation
  with open( 'transform.txt', 'w' ) as f:
    for line in transform:
      f.write (line)
  runCommand('mrtransform field_map' + fsl_suffix + ' - -flip 0 -linear transform.txt -replace | mrconvert - field_map_flip.mif' + stride_option)
  delFile('field_map' + fsl_suffix)


  # Scaling term for field map is identical to the bandwidth provided in the topup config file
  #   (converts Hz to pixel count; that way a simple image gradient can be used to get the Jacobians)
  # Let mrfilter apply the default 1 voxel size gaussian smoothing filter before calculating the field gradient
  runCommand('mrcalc field_map_flip.mif 0.1 -mult - | mrfilter - gradient - | mrconvert - field_deriv_pe.mif -coord 3 1 -axes 0,1,2')
  delFile('field_map_flip.mif')
  runCommand('mrcalc 1.0 field_deriv_pe.mif -add 0.0 -max jacobian1.mif')
  runCommand('mrcalc 1.0 field_deriv_pe.mif -sub 0.0 -max jacobian2.mif')
  delFile('field_deriv_pe.mif')
  runCommand('mrcalc jacobian1.mif jacobian1.mif -mult weight1.mif')
  runCommand('mrcalc jacobian2.mif jacobian2.mif -mult weight2.mif')
  delFile('jacobian1.mif')
  delFile('jacobian2.mif')
  runCommand('mrcalc weight1.mif weight2.mif -add sum_weights.mif')


  # Manually combine corresponding volumes from EDDY output
  runCommand('mrconvert dwi_post_eddy' + fsl_suffix + ' corrected1.mif -coord 3 0:' + str(num_volumes-1) + stride_option)
  runCommand('mrconvert dwi_post_eddy' + fsl_suffix + ' corrected2.mif -coord 3 ' + str(num_volumes) + ':' + str((num_volumes*2)-1) + stride_option)
  delFile('dwi_post_eddy' + fsl_suffix)
  runCommand('mrcalc corrected1.mif weight1.mif -mult corrected2.mif weight2.mif -mult -add sum_weights.mif -divide 0.0 -max - | mrconvert - result.mif -fslgrad bvecs_combined bvals_combined' + stride_option)


# Finish!
# Also export the gradient table to the path requested by the user if necessary
grad_export_option = ''
if lib.app.args.export_grad_mrtrix:
  grad_export_option = ' -export_grad_mrtrix ' + os.path.join(lib.app.workingDir, lib.app.args.export_grad_mrtrix)
elif lib.app.args.export_grad_fsl:
  grad_export_option = ' -export_grad_fsl ' + os.path.join(lib.app.workingDir, lib.app.args.export_grad_fsl[0]) + ' ' + os.path.join(lib.app.workingDir, lib.app.args.export_grad_fsl[1])

runCommand('mrconvert result.mif ' + os.path.join(lib.app.workingDir, lib.app.args.output) + grad_export_option + lib.app.mrtrixForce)
lib.app.complete()

